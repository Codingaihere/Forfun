class TimeSeriesFeatureSelector:
    # Assuming other functions till granger_causality are already implemented

    def extract_features_from_causality(self, causality_df, threshold=0.05, exclude_list=None):
        """
        Extract features from the Granger causality DataFrame based on a p-value threshold.

        Parameters:
        causality_df (pd.DataFrame): DataFrame with Granger causality p-values (columns `_x` and rows `_y`).
        threshold (float): The p-value threshold to consider a causal relationship significant.
        exclude_list (list): List of feature names to exclude from the final selection.

        Returns:
        dict: A dictionary where keys are target variables, and values are lists of causal features.
        """
        if exclude_list is None:
            exclude_list = []

        # Initialize the feature dictionary
        feature_dict = {}

        # Iterate over the target columns (_x)
        for target_col in causality_df.columns:
            target_feature = target_col[:-2]  # Remove `_x` suffix to get the original feature name
            if target_feature in exclude_list:
                continue

            # Find rows (_y) where the p-value is below the threshold
            causal_features = (
                causality_df[target_col][causality_df[target_col] < threshold]
                .index.tolist()
            )

            # Remove `_y` suffix from causal feature names
            causal_features = [f[:-2] for f in causal_features if f[:-2] not in exclude_list]

            # Add to the feature dictionary
            feature_dict[target_feature] = causal_features

        self.final_feature_dict = feature_dict
        print("Feature extraction from causality completed.")
        return feature_dict

    def prepare_final_feature_dataframe(self):
        """
        Prepare a DataFrame from the final feature dictionary.

        Returns:
        pd.DataFrame: A DataFrame with the final selected features.
        """
        if not self.final_feature_dict:
            raise ValueError("Final feature dictionary is empty. Run feature extraction first.")

        feature_df = pd.DataFrame(dict([(k, pd.Series(v)) for k, v in self.final_feature_dict.items()]))
        print("Final feature DataFrame prepared.")
        return feature_df