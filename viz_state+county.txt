import pandas as pd
import plotly.express as px

# Assuming your data is in a DataFrame called 'df'
# Load the data from your file
df = pd.read_csv('/mnt/data/file-K1zV8d5yyiToAe9PSvUheq')  # Update this path if needed

# Step 1: Aggregate data at the state level
state_aggregated = df.groupby('cms_state').agg({
    'churn_percentage': 'mean',   # Average churn percentage
    'active_percentage': 'mean', # Average active percentage
    'persistent_percentage': 'mean', # Average persistent percentage
    'total_count': 'sum'         # Total count for each state
}).reset_index()

# Step 2: Create a Choropleth Map
fig_choropleth = px.choropleth(
    state_aggregated,
    locations='cms_state',
    locationmode='USA-states',  # Use state codes (e.g., "CA" for California)
    color='churn_percentage',
    color_continuous_scale='Viridis',
    scope='usa',
    title='Average Churn Percentage by State'
)
fig_choropleth.show()

# Step 3: Create a Bar Chart
fig_bar = px.bar(
    state_aggregated.sort_values('churn_percentage', ascending=False),
    x='cms_state',
    y='churn_percentage',
    title='Average Churn Percentage by State',
    labels={'cms_state': 'State', 'churn_percentage': 'Churn Percentage'},
    text='churn_percentage'
)
fig_bar.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig_bar.update_layout(
    xaxis_title='State',
    yaxis_title='Average Churn Percentage',
    uniformtext_minsize=8,
    uniformtext_mode='hide'
)
fig_bar.show()



---------------------------------------------------------


import pandas as pd
from sklearn.cluster import KMeans
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Load the data
df = pd.read_csv('/mnt/data/file-K1zV8d5yyiToAe9PSvUheq')  # Update this path if needed

# Step 2: Select relevant columns for clustering
clustering_data = df[['churn_percentage', 'total_count']]

# Normalize the data for better clustering (optional, but recommended for large differences in scales)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_data = scaler.fit_transform(clustering_data)

# Step 3: Apply KMeans clustering
kmeans = KMeans(n_clusters=5, random_state=42)  # Choose 5 clusters; adjust as needed
df['cluster'] = kmeans.fit_predict(scaled_data)

# Step 4: Visualize clusters with a Scatter Plot
fig_scatter = px.scatter(
    df,
    x='total_count',
    y='churn_percentage',
    color='cluster',
    title='Clusters of Counties Based on Churn Percentage and Total Count',
    labels={'total_count': 'Total Count', 'churn_percentage': 'Churn Percentage'},
    hover_data=['cms_state', 'cms_county']
)
fig_scatter.show()

# Step 5: Create a Heatmap for County Metrics
# Pivot data for heatmap
heatmap_data = df.pivot_table(index='cms_county', columns='cluster', values='churn_percentage', aggfunc='mean')

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(
    heatmap_data,
    cmap='coolwarm',
    linewidths=0.5,
    linecolor='gray',
    annot=False,
    cbar_kws={'label': 'Churn Percentage'}
)
plt.title('Heatmap of Counties by Clusters and Churn Percentage')
plt.xlabel('Cluster')
plt.ylabel('County')
plt.show()



----------------------------------------------------------------------


import pandas as pd
import plotly.express as px

# Step 1: Load the data
df = pd.read_csv('/mnt/data/file-K1zV8d5yyiToAe9PSvUheq')  # Update path as needed

# Step 2: Load U.S. Counties GeoJSON file (required for geospatial mapping)
geojson_url = "https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json"

# Step 3: Prepare Data for Mapping
# Assume we have a FIPS code or create one for the county
# Here we create a dummy FIPS code for the sake of the example
df['fips'] = (df['cms_state'].astype(str) + df['cms_county'].astype(str)).astype('category').cat.codes
df['fips'] = df['fips'].apply(lambda x: f"{x:05d}")  # Format to 5 digits

# Step 4: Create a Choropleth Map for County-Level Churn Percentage
fig = px.choropleth(
    df,
    geojson=geojson_url,
    locations='fips',  # Requires a unique FIPS code per county
    color='churn_percentage',
    hover_name='cms_county',
    hover_data=['cms_state', 'churn_percentage'],
    title='Churn Percentage Heatmap by County',
    color_continuous_scale='Reds',  # Color scale to show intensity
    scope='usa'
)

fig.update_geos(fitbounds="locations", visible=False)  # Adjust map bounds
fig.update_layout(
    margin={"r":0,"t":0,"l":0,"b":0}
)

fig.show()
