import pandas as pd
import numpy as np

def year_overlap(df, year):
    """
    For a given year, return a dataframe of members who are enrolled at least one day in that year.
    We define year_start and year_end boundaries and check if the enrollment period overlaps.
    """
    year_start = pd.to_datetime(f"{year}-01-01")
    year_end = pd.to_datetime(f"{year}-12-31")

    # Condition for overlap: (eff_date <= year_end) and (term_date >= year_start)
    mask = (df['eff_date'] <= year_end) & (df['term_date'] >= year_start)
    df_year = df[mask].copy()
    return df_year

def resolve_multiple_plans(df_year, year):
    """
    If a member has multiple enrollment records in the same year, choose the one
    with the latest term_date as their 'final' plan for that year.
    
    This assumes that the record with the latest term_date represents where they ended up at year's end,
    or at least their most 'enduring' enrollment if they switched plans mid-year.
    """
    # Group by member_id and select the row with the max term_date
    idx = df_year.groupby('member_id')['term_date'].transform(max) == df_year['term_date']
    df_final = df_year[idx].copy()

    # If there's still a tie, break it deterministically (e.g., choose max eff_date)
    if df_final.duplicated(['member_id'], keep=False).any():
        # Resolve ties by also using max eff_date
        df_final = (df_final.sort_values(['member_id', 'term_date', 'eff_date'], ascending=[True, False, False])
                            .drop_duplicates('member_id', keep='first'))

    # Construct a combined plan identifier
    df_final['contract_pbp'] = df_final['contract_number'].astype(str) + '_' + df_final['pbp'].astype(str)

    # For clarity, keep only necessary columns for year-level analysis
    return df_final[['member_id', 'contract_pbp']]

def create_yearly_membership(df, start_year=2019, end_year=2024):
    """
    Create a dictionary of DataFrames where each key is a year and the value 
    is a DataFrame containing one record per member_id: the plan they had that year.
    """
    yearly_membership = {}
    for yr in range(start_year, end_year + 1):
        df_year = year_overlap(df, yr)
        if len(df_year) == 0:
            # No members for that year (unlikely, but we check anyway)
            yearly_membership[yr] = pd.DataFrame(columns=['member_id', 'contract_pbp'])
            continue

        df_year_resolved = resolve_multiple_plans(df_year, yr)
        df_year_resolved['year'] = yr
        yearly_membership[yr] = df_year_resolved

    return yearly_membership

def classify_transitions(yearly_membership, start_year=2019, end_year=2024):
    """
    For each consecutive pair of years (N to N+1), classify members as:
    - Persistent: Member present in both years with the same contract_pbp.
    - Churn: Member present in Year N but not in Year N+1, or present in both but changes contract_pbp.
    - New: Member present in Year N+1 but not in Year N.
    """
    results = []
    for yr in range(start_year, end_year):
        df_current = yearly_membership[yr]
        df_next = yearly_membership[yr + 1]

        current_members = df_current[['member_id', 'contract_pbp']]
        next_members = df_next[['member_id', 'contract_pbp']]

        # Merge to find members present in both years
        merged = current_members.merge(next_members, on='member_id', how='outer', suffixes=('_current', '_next'))

        # Classify
        # Persistent: in both years with the same plan
        persistent = merged.dropna(subset=['contract_pbp_current', 'contract_pbp_next'])
        persistent = persistent[persistent['contract_pbp_current'] == persistent['contract_pbp_next']]

        # Churn: Present in current year but either not in next year or changed plan
        churn = merged.dropna(subset=['contract_pbp_current'])  # must be present in current
        churn = churn[(churn['contract_pbp_next'].isna()) | 
                      (churn['contract_pbp_current'] != churn['contract_pbp_next'])]

        # New: Present in next year but not in current year
        new = merged[merged['contract_pbp_current'].isna() & merged['contract_pbp_next'].notna()]

        # Calculate proportions
        current_count = current_members['member_id'].nunique()
        next_count = next_members['member_id'].nunique()

        persistent_count = persistent['member_id'].nunique()
        churn_count = churn['member_id'].nunique()
        new_count = new['member_id'].nunique()

        persistent_prop = persistent_count / current_count if current_count > 0 else 0
        churn_prop = churn_count / current_count if current_count > 0 else 0
        new_prop = new_count / next_count if next_count > 0 else 0

        results.append({
            'transition_year': f"{yr}->{yr+1}",
            'current_year_total': current_count,
            'next_year_total': next_count,
            'persistent_count': persistent_count,
            'churn_count': churn_count,
            'new_count': new_count,
            'persistent_proportion': persistent_prop,
            'churn_proportion': churn_prop,
            'new_proportion': new_prop
        })

    return pd.DataFrame(results)

# =========================
# Example of usage:
# Assuming df_main is your large input DataFrame with the appropriate columns and data types.
# =========================

# 1. Ensure eff_date and term_date are datetime
df_main['eff_date'] = pd.to_datetime(df_main['eff_date'])
df_main['term_date'] = pd.to_datetime(df_main['term_date'])

# 2. Create yearly membership data
yearly_members = create_yearly_membership(df_main, start_year=2019, end_year=2024)

# 3. Classify transitions and compute proportions
df_results = classify_transitions(yearly_members, start_year=2019, end_year=2024)

# df_results now contains the year-to-year transition proportions at the national level.
print(df_results)
